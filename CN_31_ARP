#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <netinet/ether.h>
#include <netinet/if_ether.h>

#define BUFFER_SIZE 42  // ARP packet size

// Structure of ARP Request Packet
struct arp_packet {
    struct ether_header eth_hdr;
    struct ether_arp arp_hdr;
};

void get_mac_address(const char *iface, unsigned char *mac) {
    struct ifreq ifr;
    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == -1) {
        perror("Socket error");
        exit(EXIT_FAILURE);
    }

    strncpy(ifr.ifr_name, iface, IFNAMSIZ - 1);
    if (ioctl(sock, SIOCGIFHWADDR, &ifr) == -1) {
        perror("MAC address retrieval error");
        close(sock);
        exit(EXIT_FAILURE);
    }

    memcpy(mac, ifr.ifr_hwaddr.sa_data, 6);
    close(sock);
}

void get_ip_address(const char *iface, char *ip) {
    struct ifreq ifr;
    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == -1) {
        perror("Socket error");
        exit(EXIT_FAILURE);
    }

    strncpy(ifr.ifr_name, iface, IFNAMSIZ - 1);
    if (ioctl(sock, SIOCGIFADDR, &ifr) == -1) {
        perror("IP address retrieval error");
        close(sock);
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in *addr = (struct sockaddr_in *)&ifr.ifr_addr;
    strcpy(ip, inet_ntoa(addr->sin_addr));
    close(sock);
}

void send_arp_request(const char *iface, const char *target_ip) {
    int sock;
    struct sockaddr_ll socket_address;
    struct arp_packet packet;
    unsigned char my_mac[6];
    char my_ip[INET_ADDRSTRLEN];

    get_mac_address(iface, my_mac);
    get_ip_address(iface, my_ip);

    // Create RAW socket
    sock = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ARP));
    if (sock == -1) {
        perror("Raw socket error");
        exit(EXIT_FAILURE);
    }

    memset(&packet, 0, sizeof(packet));

    // Fill Ethernet Header
    memset(packet.eth_hdr.ether_dhost, 0xFF, 6);  // Broadcast
    memcpy(packet.eth_hdr.ether_shost, my_mac, 6);
    packet.eth_hdr.ether_type = htons(ETH_P_ARP);

    // Fill ARP Header
    packet.arp_hdr.arp_hrd = htons(ARPHRD_ETHER);
    packet.arp_hdr.arp_pro = htons(ETH_P_IP);
    packet.arp_hdr.arp_hln = 6;
    packet.arp_hdr.arp_pln = 4;
    packet.arp_hdr.arp_op = htons(ARPOP_REQUEST);
    
    memcpy(packet.arp_hdr.arp_sha, my_mac, 6);
    inet_pton(AF_INET, my_ip, packet.arp_hdr.arp_spa);
    memset(packet.arp_hdr.arp_tha, 0, 6);  // Target MAC unknown
    inet_pton(AF_INET, target_ip, packet.arp_hdr.arp_tpa);

    // Send ARP packet
    memset(&socket_address, 0, sizeof(socket_address));
    socket_address.sll_ifindex = if_nametoindex(iface);
    socket_address.sll_halen = 6;
    memset(socket_address.sll_addr, 0xFF, 6);  // Broadcast

    if (sendto(sock, &packet, sizeof(packet), 0, (struct sockaddr *)&socket_address, sizeof(socket_address)) == -1) {
        perror("Sendto error");
        close(sock);
        exit(EXIT_FAILURE);
    }

    printf("ARP request sent for IP: %s\n", target_ip);
    close(sock);
}

int main() {
    char iface[] = "eth0";  // Change to your network interface
    char target_ip[] = "192.168.1.1";  // Change to the target IP

    send_arp_request(iface, target_ip);
    return 0;
}

